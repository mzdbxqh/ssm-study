<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <!-- 指定pom版本,所有模块的pom均需指定 -->
    <modelVersion>4.0.0</modelVersion>

    <!-- 本模块的坐标 -->
    <groupId>com.oschina</groupId>
    <artifactId>study-parent</artifactId>
    <version>1.0-SNAPSHOT</version>

    <!-- 打包类型,默认为jar,含有子模块的模块自动被设置为pom -->
    <packaging>pom</packaging>

    <!-- 聚合子模块 -->
    <modules>
        <module>study-common</module>
        <module>study-plugin</module>
        <module>study-blog</module>
        <module>study-web</module>
    </modules>

    <!-- 更多模块信息,填写模块的描述还有作者信息什么的 -->
    <name>ssm学习项目</name>
    <description>模块描述</description>
    <url>https://my.oschina.net/mzdbxqh/</url>
    <developers>
        <developer>
            <name>mzdbxqh</name>
        </developer>
    </developers>

    <!-- 这里集中定义整个项目里边所有第三方依赖的版本及其他可作用于所有pom的常量 -->
    <properties>
        <!-- 指定编码方式,maven3以上可以直接识别,低版本需在build节点声明一个<encode>${project.build.sourceEncoding}</encode> -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <!-- 指定源代码和编译代码的java版本 -->
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>

        <!-- spring版本号 -->
        <spring.version>4.3.6.RELEASE</spring.version>

        <!-- aspectj版本号 -->
        <aspectj-version>1.8.9</aspectj-version>

        <!-- mybatis版本号 -->
        <mybatis.version>3.4.2</mybatis.version>
        <mybatis-spring.version>1.3.1</mybatis-spring.version>

        <!-- mysql-connector(数据库驱动)版本号 -->
        <mysql.version>5.1.40</mysql.version>

        <!-- druid(连接池)版本号 -->
        <druid.version>1.0.28</druid.version>

        <!-- junit(测试)版本号 -->
        <junit.version>4.11</junit.version>

        <!-- 日志版本号 -->
        <slf4j.version>1.7.21</slf4j.version>
        <log4j.version>1.2.17</log4j.version>

        <!-- JSP相关版本号 -->
        <jstl.version>1.2</jstl.version>
        <servlet-api.version>2.5</servlet-api.version>
        <jsp-api.version>2.0</jsp-api.version>

        <!-- 其他 -->
        <fastjson.version>1.2.29</fastjson.version>
        <guava.version>21.0</guava.version>

    </properties>

    <!-- 这里集中陈列整个项目需要用到的第三方依赖及其版本 -->
    <dependencyManagement>
        <dependencies>
            <!-- ##### Spring核心包 ##### -->
            <!-- Spring核心工具包 -->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-core</artifactId>
                <version>${spring.version}</version>
                <exclusions>
                    <!-- Spring官方建议不要用这个 -->
                    <exclusion>
                        <groupId>commons-logging</groupId>
                        <artifactId>commons-logging</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <!-- 负责Bean管理,是Spring的IoC和DI的实现包 -->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-beans</artifactId>
                <version>${spring.version}</version>
            </dependency>
             <!-- Spring的运行时环境 -->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-context</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <!-- Spring对第三方的支持包,包括缓存/邮件/任务调度/模板引擎等 -->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-context-support</artifactId>
                <version>${spring.version}</version>
            </dependency>

            <!-- ##### Spring AOP ##### -->
            <!-- 负责为Spring bean实现切面编程(对普通bean/final修饰的类无效,我们也用不上) -->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-aop</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <!-- Spring对AspectJ框架的支持包 -->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-aspects</artifactId>
                <version>${spring.version}</version>
            </dependency>

            <!-- ##### Spring web #####-->
            <!-- Spring的mvc框架 -->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-webmvc</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <!-- Spring的web增强实现 -->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-web</artifactId>
                <version>${spring.version}</version>
            </dependency>

            <!-- ##### Test ##### -->
            <!-- Spring的test支持组件,可以为诸如JUnit框架提供Spring的上下文环境 -->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-test</artifactId>
                <version>${spring.version}</version>
                <scope>test</scope>
            </dependency>
            <!-- JUnit测试框架 -->
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit.version}</version>
                <scope>test</scope>
            </dependency>

            <!-- ##### Spring数据访问及集成 ##### -->
            <!-- Spring对jdbc的简化封装 -->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-jdbc</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <!-- Spring对事务控制的实现模块 -->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-tx</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <!-- Spring对orm框架的支持包(然而不支持Mybatis) -->
            <!--<dependency>-->
            <!--<groupId>org.springframework</groupId>-->
            <!--<artifactId>spring-orm</artifactId>-->
            <!--<version>${spring.version}</version>-->
            <!--</dependency>-->

            <!-- ##### 数据库相关 ##### -->
            <!-- Mybatis框架 -->
            <dependency>
                <groupId>org.mybatis</groupId>
                <artifactId>mybatis</artifactId>
                <version>${mybatis.version}</version>
            </dependency>
            <!-- Mybatis与spring的适配器.Spring没有对mybatis的支持包,mybatis就自己写了个 -->
            <dependency>
                <groupId>org.mybatis</groupId>
                <artifactId>mybatis-spring</artifactId>
                <version>${mybatis-spring.version}</version>
            </dependency>
            <!-- MySql驱动 -->
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>${mysql.version}</version>
            </dependency>
            <!-- 连接池 -->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid</artifactId>
                <version>${druid.version}</version>
            </dependency>

            <!-- ##### 日志 ##### -->
            <!-- 桥接包,用slf4j顶上spring-core包中被排除掉的commons-logging -->
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>jcl-over-slf4j</artifactId>
                <version>${slf4j.version}</version>
            </dependency>
            <!-- slf4j的核心包(它只是一套接口) -->
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>${slf4j.version}</version>
            </dependency>
            <!-- slf4j对log4j12的支持包,把slf4j的接口转嫁到log4j上去实现 -->
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-log4j12</artifactId>
                <version>${slf4j.version}</version>
            </dependency>
            <!-- log4j的核心包(它才是真正干活的日志框架) -->
            <dependency>
                <groupId>log4j</groupId>
                <artifactId>log4j</artifactId>
                <version>${log4j.version}</version>
            </dependency>

            <!-- ##### jsp相关 ##### -->
            <!-- JSP标准标签库 -->
            <dependency>
                <groupId>jstl</groupId>
                <artifactId>jstl</artifactId>
                <version>${jstl.version}</version>
            </dependency>
            <!-- servlet-api和jsp-api都是由tomcat等servlet容器负责提供的包,这里引入只用于开发,不进行打包 -->
            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>servlet-api</artifactId>
                <version>${servlet-api.version}</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>jsp-api</artifactId>
                <version>${jsp-api.version}</version>
                <scope>provided</scope>
            </dependency>

            <!-- ##### 其他 ##### -->
            <!-- json处理器 -->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>fastjson</artifactId>
                <version>${fastjson.version}</version>
            </dependency>
            <!-- 包括了若干google的java项目广泛依赖的核心库 -->
            <!-- https://mvnrepository.com/artifact/com.google.guava/guava -->
            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>${guava.version}</version>
            </dependency>

        </dependencies>
    </dependencyManagement>

    <!-- 这里配置与build过程相关的内容 -->
    <build>
        <!-- 执行build任务时，如果没有指定目标，将使用的默认值，如：在命令行中执行mvn，则相当于执行mvn install -->
        <defaultGoal>install</defaultGoal>
        <!-- build目标文件的存放目录 -->
        <directory>${basedir}/target</directory>
        <!-- build目标文件的文件名 -->
        <finalName>${project.artifactId}-${project.version}</finalName>

        <!-- 这里定义build过程所需使用的插件 -->
        <plugins>
            <plugin>
                <!-- tomcat7插件 -->
                <groupId>org.apache.tomcat.maven</groupId>
                <artifactId>tomcat7-maven-plugin</artifactId>
                <version>2.2</version>
                <configuration>
                    <!-- webapp路径和端口,最终访问地址就是http://域名:端口/path -->
                    <path>${server.path}</path>
                    <port>${server.port}</port>

                    <!-- uri所用编码,只对tomcat:run有效,因为远程部署要在tomcat服务器的配置文件上修改才行 -->
                    <uriEncoding>${project.build.sourceEncoding}</uriEncoding>

                    <!-- tomcat自带了一个manager应用,可以通过它进行内存检测/远程部署项目等功能 -->
                    <url>${server.url}</url>

                    <!-- manager应用的账号密码,远程部署用 -->
                    <username>${server.username}</username>
                    <password>${server.password}</password>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <!-- 配置信息集-例如可以给开发环境/测试环境/生产环境预定义三套不同的配置 -->
    <profiles>
        <profile>
            <id>dev</id>
            <properties>
                <!-- 定义当前被激活的profile名称,用于build.filter节点引入同名properties文件 -->
                <!-- 即是有${basedir}/src/main/filters/dev.properties,存放开发环境下数据库连接信息等配置 -->
                <profile.active>dev</profile.active>

                <server.path>/</server.path>
                <server.port>8080</server.port>
                <server.url>http://127.0.0.1:8080/manager/text</server.url>
                <server.username>username</server.username>
                <server.password>password</server.password>
            </properties>

            <activation>
                <!-- 这套配置设为默认激活 -->
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>

        <profile>
            <id>test</id>
            <properties>
                <profile.active>test</profile.active>
                <server.path>/</server.path>
                <server.port>8080</server.port>
                <server.url>http://测试环境IP:8080/manager/text</server.url>
                <server.username>测试环境管理账号</server.username>
                <server.password>测试环境管理密码</server.password>
            </properties>
        </profile>

        <profile>
            <id>prod</id>
            <properties>
                <profile.active>prod</profile.active>
                <server.path>/</server.path>
                <server.port>8080</server.port>
                <server.url>http://生产环境IP:8080/manager/text</server.url>
                <server.username>生产环境管理账号</server.username>
                <server.password>生产环境管理密码</server.password>
            </properties>
        </profile>
    </profiles>

</project>
